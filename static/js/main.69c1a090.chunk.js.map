{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Column","props","_useState","useState","id","concat","Math","random","Date","now","value","_useState2","Object","slicedToArray","colData","setColData","data","react_default","a","createElement","Segment","Group","Button","fluid","color","icon","labelPosition","onClick","delete","Icon","name","map","key","InputData","state","filter","item","push","toConsumableArray","_useState3","_useState4","setData","Input","action","actionPosition","placeholder","onChange","e","target","App","_useState5","_useState6","columns","setColumns","_useState7","_useState8","shit","setShit","Container","style","paddingTop","length","horizontal","col","console","log","gen","prev","colValues","res","forEach","resItem","result","hasOwnProperty","values","s","i","vertical","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69c1a090.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Container, Segment, Input, Button, Icon } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nfunction Column(props) {\n  const [colData, setColData] = useState([{ id: `${Math.random()}-${Date.now()}`, value: \"\" }]);\n  props.data[props.id] = {};\n  return (\n    <Segment.Group>\n      <Segment>\n        <Button\n          fluid\n          color=\"red\"\n          icon\n          labelPosition=\"right\"\n          onClick={props.delete}\n        >\n          Remove column\n          <Icon name=\"minus\" />\n        </Button>\n      </Segment>\n      {colData.map(data => {\n        return (\n          <Segment key={data.id}>\n            <InputData\n              id={data.id}\n              data={props.data[props.id]}\n              delete={() =>\n                setColData(state => state.filter(item => item.id !== data.id))\n              }\n            />\n          </Segment>\n        );\n      })}\n      <Segment>\n        <Button\n          icon\n          fluid\n          labelPosition=\"right\"\n          onClick={() =>\n            setColData(state => {\n              state.push({ id: `${Math.random()}-${Date.now()}`, value: \"\" });\n              return [...state];\n            })\n          }\n        >\n          Add\n          <Icon name=\"plus\" />\n        </Button>\n      </Segment>\n    </Segment.Group>\n  );\n}\n\nfunction InputData(props) {\n  const [data, setData] = useState(\"\");\n  props.data[props.id] = data;\n  return (\n    <Input\n      action={{ color: \"red\", icon: \"trash\", onClick: () => props.delete() }}\n      actionPosition=\"left\"\n      placeholder=\"Text...\"\n      value={data}\n      onChange={e => setData(e.target.value)}\n      fluid\n    />\n  );\n}\n\nfunction App() {\n  const data = [];\n  const [columns, setColumns] = useState([{ id: `${Math.random()}-${Date.now()}` }, { id: `${Math.random()}-${Date.now()}` }]);\n  const [shit, setShit] = useState([]);\n  return (\n    <Container style={{paddingTop: '15px'}}>\n      <Segment.Group>\n        <Segment>\n          <Button\n            icon\n            fluid\n            labelPosition=\"right\"\n            onClick={() =>\n              setColumns(state => [\n                ...state,\n                { id: `${Math.random()}-${Date.now()}` }\n              ])\n            }\n          >\n            New column\n            <Icon name=\"plus\" />\n          </Button>\n          {columns.length > 0 ? (\n            <Segment.Group horizontal>\n              {columns.map(colData => (\n                <Segment key={colData.id}>\n                  <Column\n                    id={colData.id}\n                    data={data}\n                    delete={() =>\n                      setColumns(state => [\n                        ...state.filter(col => col !== colData)\n                      ])\n                    }\n                  />\n                </Segment>\n              ))}\n            </Segment.Group>\n          ) : null}\n        </Segment>\n        {columns.length > 0 ? (\n          <Segment>\n            <Button\n              fluid\n              onClick={() => {\n                console.log(data);\n\n                const gen = (prev, colValues) => {\n                  if (prev.length === 0) return [...colValues];\n                  let res = [];\n                  colValues.forEach(value => {\n                    res = [\n                      ...res,\n                      ...prev.map(resItem => `${resItem} ${value}`)\n                    ];\n                  });\n                  return res;\n                };\n\n                let result = [];\n                for (const key in data) {\n                  if (data.hasOwnProperty(key)) {\n                    const col = data[key];\n                    const values = Object.values(col);\n                    result = [...gen(result, values)];\n                  }\n                }\n\n                console.log(result);\n                setShit(result);\n              }}\n            >\n              Generate shit\n            </Button>\n            {shit.map((s, i) => (\n              <Segment key={i} vertical>{s}</Segment>\n            ))}\n          </Segment>\n        ) : null}\n      </Segment.Group>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}